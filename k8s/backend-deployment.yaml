apiVersion: apps/v1
kind: Deployment
metadata:
  name: pohapp-backend
  namespace: pohapp-backend
  labels:
    app: pohapp-backend
    tier: backend
spec:
  replicas: 2  # Alta disponibilidad con 2 r√©plicas
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: pohapp-backend
      tier: backend
  template:
    metadata:
      labels:
        app: pohapp-backend
        tier: backend
    spec:
      containers:
      - name: pohapp-backend
        image: ghcr.io/poravv/remake-api-rest-pohapp:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: PORT
          value: "3000"
        envFrom:
        - secretRef:
            name: pohapp-backend-env-secrets
        - configMapRef:
            name: pohapp-backend-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 45
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh","-c","sleep 15"]
      imagePullSecrets:
      - name: ghcr-secret
---
apiVersion: v1
kind: Service
metadata:
  name: pohapp-backend-service
  namespace: pohapp-backend
  labels:
    app: pohapp-backend
    tier: backend
spec:
  type: ClusterIP
  selector:
    app: pohapp-backend
    tier: backend
  ports:
  - port: 3000
    targetPort: http
    name: http
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pohapp-backend-hpa
  namespace: pohapp-backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pohapp-backend
  minReplicas: 2
  maxReplicas: 10
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      selectPolicy: Max
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pohapp-backend-ingress
  namespace: pohapp-backend
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - back.mindtechpy.net
    secretName: pohapp-backend-tls
  rules:
  - host: back.mindtechpy.net
    http:
      paths:
      - path: /pohapp(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: pohapp-backend-service
            port:
              number: 3000
